from datetime import datetime, timedelta
from models import UserSession, ProductModel, db
from menus import generar_list_menu

lista_cancelar = ["exit", "cancel", "salir", "cancelar"]

def formulario_motor(number):
    """Inicia el flujo de cotizaci√≥n creando o actualizando sesi√≥n"""
    session = UserSession.query.filter_by(phone_number=number).first()
    if not session:
        session = UserSession(phone_number=number, last_interaction=datetime.utcnow())
        db.session.add(session)
        db.session.commit()
    else:
        # Refresca last_interaction por si la sesi√≥n existe
        session.last_interaction = datetime.utcnow()
        db.session.commit()

    # Siempre borra el producto anterior para evitar residuos de formularios previos
    ProductModel.query.filter_by(session_id=session.idUser).delete()
    db.session.commit()

    # Crea nuevo producto
    producto = ProductModel(session_id=session.idUser, current_step='awaiting_marca')
    db.session.add(producto)
    db.session.commit()

    return [{
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": number,
        "type": "interactive",
        "interactive":{
            "type":"button",
            "body": {
                "text": "üîß *Formulario para cotizaci√≥n de motores y repuestos* üõª\n\nüìùEscribe la *MARCA* de tu veh√≠culo:\n_(Ej: Toyota, Mitsubishi, Kia, Hyundai)_ "
            },
            "footer": {"text": ""},
            "action": {
                "buttons":[
                    {
                        "type": "reply",
                        "reply":{
                            "id":"exit",
                            "title":"‚ùå Cancelar/Salir"
                        }
                    }
                ]
            }
        }
    }]

def manejar_paso_actual(number, user_message):
    """Maneja todos los pasos del formulario"""

    # Siempre obtiene la √∫ltima versi√≥n actualizada de session y producto
    session = UserSession.query.filter_by(phone_number=number).first()
    if not session:
        return error_inicio(number, "‚ö†Ô∏è Sesi√≥n no encontrada. Env√≠a '1' para comenzar. ")

    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    if not producto:
        return error_inicio(number, "‚ö†Ô∏è Producto no encontrado. Env√≠a '1' para comenzar. ")

    # Si cancela o timeout
    if user_message.lower() in lista_cancelar or (
        session.last_interaction and datetime.utcnow() - session.last_interaction > timedelta(hours=1)
    ):
        return cancelar_flujo(number)

    # Decide el paso seg√∫n current_step
    paso = producto.current_step
    if paso == 'awaiting_marca':
        return manejar_paso_marca(number, user_message)
    elif paso == 'awaiting_modelo':
        return manejar_paso_modelo(number, user_message)
    elif paso == 'awaiting_combustible':
        return manejar_paso_combustible(number, user_message)
    elif paso == 'awaiting_a√±o':
        return manejar_paso_anio(number, user_message)
    elif paso == 'awaiting_tipo_repuesto':
        return manejar_paso_tipo_repuesto(number, user_message)
    elif paso == 'awaiting_comentario':
        return manejar_paso_comentario(number, user_message)
    elif paso == 'completed':
        return manejar_paso_finish(number, user_message)
    else:
        return error_inicio(number, "‚ö†Ô∏è Flujo no reconocido. Env√≠a '1' para reiniciar. ")

def error_inicio(number, mensaje):
    return [{
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": number,
        "type": "interactive",
        "interactive":{
            "type":"button",
            "body": {"text": mensaje},
            "footer": {"text": ""},
            "action": {
                "buttons":[
                    {
                        "type": "reply",
                        "reply":{
                            "id":"exit",
                            "title":"‚ùå Cancelar/Salir"
                        }
                    }
                ]
            }
        }
    }]

def manejar_paso_marca(number, user_message):
    session = UserSession.query.filter_by(phone_number=number).first()
    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    producto.marca = user_message
    producto.current_step = 'awaiting_modelo'
    session.last_interaction = datetime.utcnow()
    db.session.commit()
    return [{
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": number,
        "type": "interactive",
        "interactive":{
            "type":"button",
            "body": {
                "text": f"‚úÖ Marca: {user_message}\n\nüìùAhora escribe la *LINEA*:\n_(Ej: L200, Hilux, Terracan, Sportage)_ "
            },
            "footer": {"text": ""},
            "action": {
                "buttons":[
                    {
                        "type": "reply",
                        "reply":{
                            "id":"exit",
                            "title":"‚ùå Cancelar/Salir"
                        }
                    }
                ]
            }
        }
    }]

def manejar_paso_modelo(number, user_message):
    session = UserSession.query.filter_by(phone_number=number).first()
    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    producto.linea = user_message
    producto.current_step = 'awaiting_combustible'
    session.last_interaction = datetime.utcnow()
    db.session.commit()
    return [{
        "messaging_product": "whatsapp",
        "to": number,
        "type": "interactive",
        "interactive": {
            "type": "button",
            "body": {
                "text": f"‚úÖ Marca: {producto.marca}\n‚úÖ L√≠nea: {user_message}\n\nü´≥Selecciona el *COMBUSTIBLE:* "
            },
            "action": {
                "buttons": [
                    {"type": "reply", "reply": {"id": "gasolina", "title": "Gasolina"}},
                    {"type": "reply", "reply": {"id": "diesel", "title": "Di√©sel"}},
                    {"type": "reply", "reply": {"id":"exit", "title":"‚ùå Cancelar/Salir"}}
                ]
            }
        }
    }]

def manejar_paso_combustible(number, user_message):
    session = UserSession.query.filter_by(phone_number=number).first()
    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    lista_combustible = ["gasolina", "diesel", "disel", "di√©sel", "gas", "gas propano"]
    if not user_message.lower() in lista_combustible:
        return error_inicio(number, "‚ö†Ô∏è Combustible inv√°lido. Ingresa el combustible.\nEjemplo: Gasolina, Diesel ")

    producto.combustible = user_message
    producto.current_step = 'awaiting_a√±o'
    session.last_interaction = datetime.utcnow()
    db.session.commit()
    return [{
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": number,
        "type": "interactive",
        "interactive":{
            "type":"button",
            "body": {
                "text": f"‚úÖ Marca: {producto.marca}\n‚úÖ L√≠nea: {producto.linea}\n‚úÖ Combustible: {producto.combustible}\n\nüìùEscribe el *A√ëO* del veh√≠culo:\n_(Ej: 1995, 2000, 2005, 2010, 2018, 2020)_ "
            },
            "footer": {"text": ""},
            "action": {
                "buttons":[
                    {
                        "type": "reply",
                        "reply":{
                            "id":"exit",
                            "title":"‚ùå Cancelar/Salir"
                        }
                    }
                ]
            }
        }
    }]

def manejar_paso_anio(number, user_message):
    session = UserSession.query.filter_by(phone_number=number).first()
    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    if not user_message.isdigit() or not (1950 < int(user_message) <= datetime.now().year + 1):
        return error_inicio(number, "‚ö†Ô∏è A√±o inv√°lido. Ingresa un a√±o entre 1950 y actual.\nEjemplo: 1995, 2000, 2005, 2008, 2015, 2020 ")
    producto.modelo_anio = user_message
    producto.current_step = 'awaiting_tipo_repuesto'
    session.last_interaction = datetime.utcnow()
    db.session.commit()
    return [{
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": number,
        "type": "interactive",
        "interactive":{
            "type":"button",
            "body": {
                "text": f"‚úÖ Marca: {producto.marca}\n‚úÖ L√≠nea: {producto.linea}\n‚úÖ Combustible: {producto.combustible}\n‚úÖ A√±o/Modelo: {producto.modelo_anio}\n\nüìùEscribe el *TIPO DE REPUESTO* que necesitas:\n_(Ej: Motor, Culata, Turbo, Cig√ºe√±al)_ "
            },
            "footer": {"text": ""},
            "action": {
                "buttons":[
                    {
                        "type": "reply",
                        "reply":{
                            "id":"exit",
                            "title":"‚ùå Cancelar/Salir"
                        }
                    }
                ]
            }
        }
    }]

def manejar_paso_tipo_repuesto(number, user_message):
    session = UserSession.query.filter_by(phone_number=number).first()
    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    producto.tipo_repuesto = user_message
    producto.current_step = 'awaiting_comentario'
    session.last_interaction = datetime.utcnow()
    db.session.commit()
    return [{
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": number,
        "type": "interactive",
        "interactive":{
            "type":"button",
            "body": {
                "text": f"‚úÖ Marca: {producto.marca}\n‚úÖ L√≠nea: {producto.linea}\n‚úÖ Combustible: {producto.combustible}\n‚úÖ A√±o/Modelo: {producto.modelo_anio}\n‚úÖ Tipo de repuesto: {producto.tipo_repuesto}\n\nüìùEscribe una *DESCRIPCI√ìN O COMENTARIO FINAL*:\n_Si no tienes comentarios escribe *No* o presiona el bot√≥n_ "
            },
            "footer": {"text": ""},
            "action": {
                "buttons": [
                    {"type": "reply", "reply": {"id": "no", "title": "No"}},
                    {"type": "reply", "reply": {"id":"exit", "title":"‚ùå Cancelar/Salir"}}
                ]
            }
        }
    }]

def manejar_paso_comentario(number, user_message):
    session = UserSession.query.filter_by(phone_number=number).first()
    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    producto.estado = user_message
    producto.current_step = 'completed'
    session.last_interaction = datetime.utcnow()
    db.session.commit()
    return [{
        "messaging_product": "whatsapp",
        "to": number,
        "type": "interactive",
        "interactive": {
            "type": "button",
            "body": {
                "text": f"‚úÖ *Datos registrados:*\n\n‚Ä¢ *Marca:* {producto.marca}\n‚Ä¢ *Modelo:* {producto.linea}\n‚Ä¢ *Combustible:* {producto.combustible}\n‚Ä¢ *A√±o:* {producto.modelo_anio}\n‚Ä¢ *Tipo de repuesto:* {producto.tipo_repuesto}\n‚Ä¢ *Descripci√≥n:* {producto.estado}\n\n"
            },
            "action": {
                "buttons": [
                    {"type": "reply", "reply": {"id": "cotizar_si", "title": "‚úÖ S√≠, cotizar"}},
                    {"type": "reply", "reply": {"id": "cancelar", "title": "‚ùå Salir/Cancelar"}}
                ]
            }
        }
    }]

def manejar_paso_finish(number, user_message):
    # Llamada directa para integraci√≥n con el handler de slots (no hagas import arriba, hazlo aqu√≠)
    from app import handle_cotizacion_slots
    session = UserSession.query.filter_by(phone_number=number).first()
    producto = ProductModel.query.filter_by(session_id=session.idUser).first()
    producto.current_step = 'finished'
    session.last_interaction = datetime.utcnow()
    db.session.commit()

    if user_message.lower() in lista_cancelar:
        return cancelar_flujo(number)

    if user_message == "cotizar_si":
        slots = {
            "tipo_repuesto": producto.tipo_repuesto,
            "marca": producto.marca,
            "linea": producto.linea,
            "a√±o": producto.modelo_anio,
            "serie_motor": None,
            "cc": None,
            "combustible": producto.combustible,
        }
        state = {
            "session": session,
            "phone_number": number,
            "source": "whatsapp",
            "user_msg": "Cotizar",
            "slots": slots,
            "response_data": [],
            "message_data": {},
        }
        resultado = handle_cotizacion_slots(state)
        ProductModel.query.filter_by(session_id=session.idUser).delete()
        db.session.commit()
        return resultado["response_data"]

    # Si no es cotizar, termina y muestra men√∫
    return [
        {
            "messaging_product": "whatsapp",
            "to": number,
            "type": "text",
            "text": {
                "body": "üö™ Has salido del formulario de cotizaci√≥n."
            }
        },
        generar_list_menu(number)
    ]

def cancelar_flujo(number):
    session = UserSession.query.filter_by(phone_number=number).first()
    if session:
        ProductModel.query.filter_by(session_id=session.idUser).delete(synchronize_session=False)
        session.last_interaction = datetime.utcnow()
        db.session.commit()
    return [
        {
            "messaging_product": "whatsapp",
            "to": number,
            "type": "text",
            "text": {
                "body": "üö™ Formulario cancelado. Has salido del formulario actual. ¬øQu√© deseas hacer ahora?"
            }
        },
        generar_list_menu(number)
    ]
